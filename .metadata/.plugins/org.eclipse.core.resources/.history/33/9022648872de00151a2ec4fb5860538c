import java.util.*;

public class Mergesort {

	public static void main(String[] args){
		int[] a = {2, 6, 3, 5, 1};
		mergeSort(a);
		
		System.out.println(" Array (a):");
		for(int i=0; i < a.length; i++){
			System.out.println(a[i]);
		}
	}

	public static void mergeSort(int[ ] a){
		int[] tmp = new int[a.length];
		mergeSort(a, tmp,  0,  a.length - 1);
	}


	private static void mergeSort(int[ ] a, int[ ] tmp, int left, int right){
		if( left < right ){
			int center = (left + right) / 2;
			mergeSort(a, tmp, left, center);
			mergeSort(a, tmp, center + 1, right);
			merge(a, tmp, left, center, right);
		}
	}


    private static void merge(int[ ] a, int[ ] tmp, int first, int center, int last ){
    	int right = center+1;
        int k = first;

        while( first <= center && right <= last){
            if(a[first] <= a[right]){
                tmp[k] = a[first];
                first++;
            }else{
                tmp[k] = a[right];
                right++;
            }
            k++;
        }
        
        while(first <= center){    // Copy rest of first half
            tmp[k] = a[first];
            k++; first++;
        }
        
        while(right <= last){  // Copy rest of right half
            tmp[k] = a[right];
        	k++; right++;
        }
        
        // Copy tmp back
        for(int i = 0; i < (last - first + 1); i++, last--)
            a[last] = tmp[last];
        
        center = right;

    }
	
    /**
	 public void sort(int inputArr[]) {
	        this.array = inputArr;
	        this.length = inputArr.length;
	        this.tempMergArr = new int[length];
	        doMergeSort(0, length - 1);
	    }
	
	public void mergeSort(int[] vec, int pri, int ult){
		int medio = pri + (ult-pri) / 2;
		if(pri < ult){
			mergeSort(vec, pri, medio);
			mergeSort(vec, medio+1, ult);
			mezcla(vec, pri, medio, ult);
		}
	}
	
	public void mezcla(int[] vec, int pri, int medio, int ult){
		int[] aux = new int[(ult-pri)+1];
		
		for(int i=pri; i <= ult; i++){
			aux[i] = vec[i];
		}
	}
	**/
}
